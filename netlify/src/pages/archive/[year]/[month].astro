---
export const prerender = true;
import Layout from '../../../layouts/Layout.astro';
interface BlogPost {
  id: number;
  Slug?: string;
  Title?: string;
  FeaturedImg: {
    url: string;
    alternativeText?: string;
  } | null;
  Content?: {
    children?: { text: string }[];
  }[];
}
interface PostPath {
  params: { year: string; month: string };
  props: { posts: any };
}
export async function getStaticPaths() {
  try {
    const baseUrl = import.meta.env.PUBLIC_STRAPI_URL || import.meta.env.STRAPI_URL;
    const token = import.meta.env.STRAPI_TOKEN;
    
    if (!baseUrl) {
      console.warn("Strapi URL is not defined. Using fallback data.");
      // Return fallback static paths for build to succeed
      return [{
        params: { year: "2023", month: "01" },
        props: { posts: [] }
      }];
    }
    
    // Fetch all posts to get their dates
    const response = await fetch(`${baseUrl}/api/posts?sort=createdAt:DESC&populate=*`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch from Strapi: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    const postItems = data.data || [];
    
    // Generate unique year/month combinations
    const paths: PostPath[] = [];
    for (const post of postItems) {
      // Ensure we have attributes and createdAt before proceeding
      if (!post?.createdAt) {
        console.warn('Skipping post without createdAt:', post);
        continue;
      }
      const date = new Date(post.createdAt);
      paths.push({
        params: {
          year: date.getFullYear().toString(),
          month: (date.getMonth() + 1).toString().padStart(2, '0'),
        },
        props: { posts: data.data } // Pass posts as props if needed
      });
    }
    
    // Remove duplicates
    const uniquePaths = Array.from(new Set(paths.map(p => JSON.stringify(p))))
      .map(str => JSON.parse(str) as PostPath);
      
    return uniquePaths;
  } catch (error) {
    console.error('Error in getStaticPaths:', error);
    // Return minimal fallback paths to allow the build to succeed
    return [{
      params: { year: "2023", month: "01" },
      props: { posts: [] }
    }];
  }
}

const { year, month } = Astro.params;
let posts = [];

try {
  // Modify baseUrl and token to use fallbacks if the primary values are undefined:
  const baseUrl = import.meta.env.PUBLIC_STRAPI_URL || import.meta.env.STRAPI_URL;
  const token = import.meta.env.STRAPI_TOKEN;
  
  if (!baseUrl) {
    console.warn("Strapi URL is not defined.");
  } else {
    const startDate = new Date(`${year}-${month}-01`);
    const endDate = new Date(startDate);
    endDate.setMonth(startDate.getMonth() + 1);
    
    const response = await fetch(
      `${baseUrl}/api/posts?filters[createdAt][$gte]=${startDate.toISOString()}&filters[createdAt][$lt]=${endDate.toISOString()}&populate=*`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
    
    if (response.ok) {
      const data = await response.json();
      posts = data.data || [];
    } else {
      console.error(`Failed to fetch posts: ${response.status} ${response.statusText}`);
    }
  }
} catch (error) {
  console.error('Failed to fetch posts:', error);
  // posts will remain an empty array
}

const startDate = new Date(`${year}-${month}-01`);
const monthName = startDate.toLocaleString('default', { month: 'long' });
---
<Layout title={`Archive: ${monthName} ${year}`}>
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6">Archive: {monthName} {year}</h1>
    {posts.length > 0 ? (
      <ul class="space-y-6">
        {posts.map((post: BlogPost) => {
          const slug = post.Slug;
          if (!slug) {
            return <li>Missing slug for this post</li>;
          }
          
          try {
            const excerpt = post.Content?.[0]?.children?.[0]?.text?.slice(0, 400);
            const baseUrl = import.meta.env.PUBLIC_STRAPI_URL || import.meta.env.STRAPI_URL || '';
            const imgUrl = post.FeaturedImg ? `${baseUrl}${post.FeaturedImg.url}` : '/default-image.jpg';
            const imgAlt = post.FeaturedImg?.alternativeText || post.Title || 'Blog post image';
            
            return (
              <li class="p-4 rounded">
                <img
                  src={imgUrl}
                  alt={imgAlt}
                  class="mb-3 w-full object-cover rounded"
                />
                <a href={`/blog/${slug}`} class="text-xl hover:text-blue-600">
                  {post.Title || 'No Title'}
                </a>
                {excerpt && (
                  <p class="mt-1 text-gray-700">
                    {excerpt}...
                    <a
                      href={`/blog/${slug}`}
                      class="text-blue-600 ml-2 hover:underline"
                    >
                      Read More
                    </a>
                  </p>
                )}
              </li>
            );
          } catch (error) {
            console.error('Error rendering post:', error);
            return <li>Error displaying this post</li>;
          }
        })}
      </ul>
    ) : (
      <p>No posts found for this period.</p>
    )}
  </div>
</Layout>
